name: Windows Testing Nuitka

on:
  push:
    branches:
      - Testing
      - testing
  pull_request:
    branches:
      - Testing
      - testing
  workflow_dispatch:
  workflow_call:
    inputs:
      ref:
        description: Git ref to build
        required: false
        type: string
        default: ''
    outputs:
      hash:
        description: SHA256 hash of the Windows executable
        value: ${{ jobs.build-windows-nuitka.outputs.hash }}
      vt_url:
        description: VirusTotal URL for the Windows executable
        value: ${{ jobs.build-windows-nuitka.outputs.vt_url }}
      artifact_name:
        description: Name of the produced artifact
        value: ${{ jobs.build-windows-nuitka.outputs.artifact_name }}

permissions:
  contents: read
  id-token: write

jobs:
  build-windows-nuitka:
    name: Build Windows executable with Nuitka
    runs-on: windows-latest
    outputs:
      hash: ${{ steps.compute_hash.outputs.hash }}
      vt_url: ${{ steps.compute_hash.outputs.vt_url }}
      artifact_name: PatchOpsIII-windows-nuitka
    defaults:
      run:
        shell: pwsh
        working-directory: Testing
    env:
      WINDOWS_DIST_DIR: dist\windows-nuitka
      WINDOWS_BINARY: PatchOpsIII-nuitka.exe
      VT_CLI_ARCHIVE: vt-cli-latest.zip
      COSIGN_PRIVATE_KEY: ${{ secrets.COSIGN_PRIVATE_KEY }}
      COSIGN_PASSWORD: ${{ secrets.COSIGN_PASSWORD }}
      VT_API_KEY: ${{ secrets.VT_API_KEY }}
    steps:
      - uses: actions/checkout@v4
        with:
          ref: ${{ inputs.ref != '' && inputs.ref || github.ref }}
      - name: Setup Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.11'
          cache: 'pip'
          cache-dependency-path: Testing/requirements.txt
      - name: Determine version metadata
        id: version
        run: |
          $ref = '${{ inputs.ref != '' && inputs.ref || github.ref }}'
          if ($ref -match '^refs/tags/(.+)$') {
            $version = $Matches[1]
          } else {
            $version = "0.0.${{ github.run_number }}"
          }
          $normalized = $version -replace '[^0-9\.]', '.'
          if (-not ($normalized -match '^\d+\.\d+\.\d+(\.\d+)?$')) {
            $normalized = '0.0.${{ github.run_number }}'
          }
          "version=$version" | Out-File -FilePath $env:GITHUB_OUTPUT -Encoding utf8 -Append
          "normalized=$normalized" | Out-File -FilePath $env:GITHUB_OUTPUT -Encoding utf8 -Append
      - name: Install dependencies
        run: |
          python -m pip install -r requirements.txt
          python -m pip install --upgrade nuitka
      - name: Cache Nuitka build artifacts
        id: cache-nuitka
        uses: actions/cache@v4
        with:
          path: |
            PatchOpsIII.build
            PatchOpsIII.dist
            PatchOpsIII.onefile-build
            .nuitka-cache
          key: nuitka-${{ runner.os }}-${{ steps.version.outputs.normalized }}
      - name: Prepare build directories
        run: |
          if (Test-Path 'dist') { Remove-Item 'dist' -Recurse -Force }
          if (Test-Path 'build') { Remove-Item 'build' -Recurse -Force }
          if ('${{ steps.cache-nuitka.outputs.cache-hit }}' -ne 'true') {
            if (Test-Path 'PatchOpsIII.build') { Remove-Item 'PatchOpsIII.build' -Recurse -Force }
            if (Test-Path 'PatchOpsIII.dist') { Remove-Item 'PatchOpsIII.dist' -Recurse -Force }
            if (Test-Path 'PatchOpsIII.onefile-build') { Remove-Item 'PatchOpsIII.onefile-build' -Recurse -Force }
            if (Test-Path '.nuitka-cache') { Remove-Item '.nuitka-cache' -Recurse -Force }
          }
          if (Test-Path 'PatchOpsIII.spec') { Remove-Item 'PatchOpsIII.spec' -Force }
          New-Item -ItemType Directory -Force -Path $env:WINDOWS_DIST_DIR | Out-Null
      - name: Build executable with Nuitka
        run: |
          python -m nuitka `
            --onefile `
            --onefile-no-compression `
            --clang `
            --lto=yes `
            --assume-yes-for-downloads `
            --enable-plugin=qt-plugins `
            --qt-plugins=sensible,platforms `
            --nofollow-import-to=PySide6.QtWebEngineCore `
            --nofollow-import-to=PySide6.QtWebEngineWidgets `
            --nofollow-import-to=PySide6.QtWebEngine `
            --nofollow-import-to=PySide6.QtWebEngineQuick `
            --nofollow-import-to=PySide6.QtMultimedia `
            --nofollow-import-to=PySide6.QtMultimediaWidgets `
            --nofollow-import-to=PySide6.QtOpenGLWidgets `
            --include-package=vdf `
            --include-package=requests `
            --include-data-file=presets.json=presets.json `
            --include-data-file=PatchOpsIII.ico=PatchOpsIII.ico `
            --windows-icon-from-ico=PatchOpsIII.ico `
            --windows-company-name=boggedbrush `
            --windows-product-name=PatchOpsIII `
            --windows-file-version=${{ steps.version.outputs.normalized }} `
            --windows-product-version=${{ steps.version.outputs.normalized }} `
            --output-dir=$env:WINDOWS_DIST_DIR `
            --output-filename=$env:WINDOWS_BINARY `
            main.py
      - name: Ensure executable exists
        run: |
          $target = Join-Path $env:WINDOWS_DIST_DIR $env:WINDOWS_BINARY
          if (-not (Test-Path $target)) {
            throw "$target was not produced"
          }
      - name: Install cosign (optional)
        if: ${{ env.COSIGN_PRIVATE_KEY != '' }}
        uses: sigstore/cosign-installer@v3.4.0
      - name: Sign executable with cosign
        if: ${{ env.COSIGN_PRIVATE_KEY != '' }}
        env:
          COSIGN_EXPERIMENTAL: "1"
        run: |
          $target = Join-Path $env:WINDOWS_DIST_DIR $env:WINDOWS_BINARY
          if (-not (Test-Path $target)) {
            throw "$target was not produced"
          }
          Set-Content -Path cosign.key -Value $env:COSIGN_PRIVATE_KEY -NoNewline
          cosign sign-blob --yes --key cosign.key --output-signature "$target.sig" --output-certificate "$target.pem" $target
          Remove-Item cosign.key
      - name: Compute Windows hash
        id: compute_hash
        run: |
          $target = Join-Path $env:WINDOWS_DIST_DIR $env:WINDOWS_BINARY
          if (-not (Test-Path $target)) {
            throw "$target was not produced"
          }
          $hash = (Get-FileHash -Algorithm SHA256 -Path $target).Hash
          Set-Content -Path (Join-Path $env:WINDOWS_DIST_DIR 'hash.log') -Value $hash
          Write-Host "SHA256: $hash"
          $vtUrl = "https://www.virustotal.com/gui/file/$hash"
          "WINDOWS_VT_URL=$vtUrl" | Out-File -FilePath $env:GITHUB_ENV -Encoding utf8 -Append
          "hash=$hash" | Out-File -FilePath $env:GITHUB_OUTPUT -Encoding utf8 -Append
          "vt_url=$vtUrl" | Out-File -FilePath $env:GITHUB_OUTPUT -Encoding utf8 -Append
      - name: Determine VirusTotal CLI release
        id: vt_release
        if: ${{ env.VT_API_KEY != '' }}
        shell: pwsh
        run: |
          $release = Invoke-RestMethod -Uri https://api.github.com/repos/VirusTotal/vt-cli/releases/latest
          $tag = $release.tag_name
          if (-not $tag) {
            throw 'Release tag missing from VirusTotal CLI metadata'
          }
          $asset = $release.assets | Where-Object { $_.name -eq 'Windows64.zip' } | Select-Object -First 1
          if (-not $asset) {
            throw 'Windows64.zip asset not found in VirusTotal CLI release metadata'
          }
          "tag=$tag" | Out-File -FilePath $env:GITHUB_OUTPUT -Encoding utf8 -Append
          "url=$($asset.browser_download_url)" | Out-File -FilePath $env:GITHUB_OUTPUT -Encoding utf8 -Append
      - name: Cache VirusTotal CLI
        if: ${{ env.VT_API_KEY != '' }}
        id: cache-vt
        uses: actions/cache@v4
        with:
          path: |
            vt.exe
            ${{ env.VT_CLI_ARCHIVE }}
          key: vt-${{ runner.os }}-${{ steps.vt_release.outputs.tag }}
      - name: Download VirusTotal CLI
        if: ${{ env.VT_API_KEY != '' && steps.cache-vt.outputs.cache-hit != 'true' }}
        shell: pwsh
        run: |
          Invoke-WebRequest -Uri '${{ steps.vt_release.outputs.url }}' -OutFile $env:VT_CLI_ARCHIVE
          Expand-Archive -Path $env:VT_CLI_ARCHIVE -DestinationPath . -Force
      - name: Ensure VirusTotal CLI executable
        if: ${{ env.VT_API_KEY != '' }}
        shell: pwsh
        run: |
          if (-not (Test-Path 'vt.exe')) {
            throw 'VirusTotal CLI binary vt.exe not found'
          }
      - name: VirusTotal scan (optional)
        if: ${{ env.VT_API_KEY != '' }}
        env:
          VT_API_KEY: ${{ env.VT_API_KEY }}
        run: |
          $target = Join-Path $env:WINDOWS_DIST_DIR $env:WINDOWS_BINARY
          .\vt.exe scan file $target --wait --apikey $env:VT_API_KEY
      - name: Upload Windows artifact
        uses: actions/upload-artifact@v4
        with:
          name: PatchOpsIII-windows-nuitka
          path: |
            Testing/${{ env.WINDOWS_DIST_DIR }}/${{ env.WINDOWS_BINARY }}
            Testing/${{ env.WINDOWS_DIST_DIR }}/hash.log
            Testing/${{ env.WINDOWS_DIST_DIR }}/${{ env.WINDOWS_BINARY }}.sig
            Testing/${{ env.WINDOWS_DIST_DIR }}/${{ env.WINDOWS_BINARY }}.pem
          if-no-files-found: ignore
