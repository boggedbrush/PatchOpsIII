name: Linux Testing Build

on:
  push:
    branches:
      - Testing
      - testing
  pull_request:
    branches:
      - Testing
      - testing
  workflow_dispatch:
  workflow_call:
    inputs:
      ref:
        description: Git ref to build
        required: false
        type: string
        default: ''
    outputs:
      hash:
        description: SHA256 hash of the Linux binary
        value: ${{ jobs.build-linux.outputs.hash }}
      vt_url:
        description: VirusTotal URL for the Linux binary
        value: ${{ jobs.build-linux.outputs.vt_url }}
      artifact_name:
        description: Name of the produced Linux artifact
        value: ${{ jobs.build-linux.outputs.artifact_name }}

permissions:
  contents: read
  id-token: write

jobs:
  build-linux:
    name: Build Linux executable
    runs-on: ubuntu-latest
    outputs:
      hash: ${{ steps.compute_hash.outputs.hash }}
      vt_url: ${{ steps.compute_hash.outputs.vt_url }}
      artifact_name: PatchOpsIII-linux-testing
    defaults:
      run:
        shell: bash
        working-directory: Testing
    env:
      PYINSTALLER_ARCHIVE: pyinstaller-latest.zip
      PYINSTALLER_DIR: pyinstaller-develop
      LINUX_DIST_DIR: dist/linux
      VT_CLI_ARCHIVE: vt-cli.zip
      COSIGN_PRIVATE_KEY: ${{ secrets.COSIGN_PRIVATE_KEY }}
      COSIGN_PASSWORD: ${{ secrets.COSIGN_PASSWORD }}
      VT_API_KEY: ${{ secrets.VT_API_KEY }}
    steps:
      - uses: actions/checkout@v4
        with:
          ref: ${{ inputs.ref != '' && inputs.ref || github.ref }}
      - name: Setup Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.11'
          cache: 'pip'
          cache-dependency-path: Testing/requirements.txt
      - name: Determine PyInstaller commit
        id: pyinstaller_ref
        run: |
          set -euo pipefail
          commit=$(git ls-remote https://github.com/pyinstaller/pyinstaller develop | awk 'NR==1 {print $1}')
          if [ -z "$commit" ]; then
            echo "Failed to resolve PyInstaller develop commit" >&2
            exit 1
          fi
          echo "commit=$commit" >> "$GITHUB_OUTPUT"
      - name: Cache PyInstaller source
        id: cache-pyinstaller
        uses: actions/cache@v4
        with:
          path: ${{ env.PYINSTALLER_DIR }}
          key: pyinstaller-${{ runner.os }}-${{ steps.pyinstaller_ref.outputs.commit }}
      - name: Install project requirements
        run: |
          python -m pip install -r requirements.txt
      - name: Prepare PyInstaller source
        if: ${{ steps.cache-pyinstaller.outputs.cache-hit != 'true' }}
        run: |
          rm -f "$PYINSTALLER_ARCHIVE"
          rm -rf "$PYINSTALLER_DIR"
          curl -L -o "$PYINSTALLER_ARCHIVE" https://github.com/pyinstaller/pyinstaller/archive/refs/heads/develop.zip
          unzip -q "$PYINSTALLER_ARCHIVE"
      - name: Install PyInstaller from source
        run: |
          pushd "$PYINSTALLER_DIR"
          python -m pip install .
          popd
      - name: Rebuild PyInstaller bootloader
        if: ${{ steps.cache-pyinstaller.outputs.cache-hit != 'true' }}
        run: |
          pushd "$PYINSTALLER_DIR/bootloader"
          python waf distclean all
          popd
      - name: Build Linux binary
        run: |
          rm -rf dist build
          rm -f PatchOpsIII.spec
          mkdir -p "$LINUX_DIST_DIR"
          python -m PyInstaller \
            --onefile \
            --noconsole \
            --clean \
            --noupx \
            --name PatchOpsIII \
            --icon PatchOpsIII.ico \
            --add-data "presets.json:." \
            --add-data "PatchOpsIII.ico:." \
            --distpath "$LINUX_DIST_DIR" \
            main.py
      - name: Install cosign (optional)
        if: ${{ env.COSIGN_PRIVATE_KEY != '' }}
        uses: sigstore/cosign-installer@v3.4.0
      - name: Sign Linux binary with cosign
        if: ${{ env.COSIGN_PRIVATE_KEY != '' }}
        env:
          COSIGN_EXPERIMENTAL: "1"
        run: |
          if [ ! -f "dist/linux/PatchOpsIII" ]; then
            echo "dist/linux/PatchOpsIII was not produced" >&2
            exit 1
          fi
          printf "%s" "$COSIGN_PRIVATE_KEY" > cosign.key
          cosign sign-blob --yes --key cosign.key --output-signature dist/linux/PatchOpsIII.sig --output-certificate dist/linux/PatchOpsIII.pem dist/linux/PatchOpsIII
          rm -f cosign.key
      - name: Compute Linux hash
        id: compute_hash
        run: |
          if [ ! -f "dist/linux/PatchOpsIII" ]; then
            echo "dist/linux/PatchOpsIII was not produced" >&2
            exit 1
          fi
          hash=$(sha256sum dist/linux/PatchOpsIII | cut -d ' ' -f1)
          printf "%s\n" "$hash" > dist/linux/hash.log
          echo "SHA256: $hash"
          vt_url="https://www.virustotal.com/gui/file/$hash"
          echo "LINUX_VT_URL=$vt_url" >> "$GITHUB_ENV"
          printf "hash=%s\n" "$hash" >> "$GITHUB_OUTPUT"
          printf "vt_url=%s\n" "$vt_url" >> "$GITHUB_OUTPUT"
      - name: Determine VirusTotal CLI release
        id: vt_release
        if: ${{ env.VT_API_KEY != '' }}
        run: |
          set -euo pipefail
          python <<'PY'
          import json
          import os
          import sys
          import urllib.request

          url = 'https://api.github.com/repos/VirusTotal/vt-cli/releases/latest'
          with urllib.request.urlopen(url) as response:
              data = json.load(response)
          tag = data.get('tag_name')
          try:
              asset_url = next(asset['browser_download_url'] for asset in data['assets'] if asset['name'] == 'Linux64.zip')
          except StopIteration:
              raise SystemExit('Linux64.zip asset not found in VirusTotal CLI release metadata')
          if not tag:
              raise SystemExit('Release tag missing from VirusTotal CLI metadata')
          with open(os.environ['GITHUB_OUTPUT'], 'a', encoding='utf-8') as fh:
              fh.write(f'tag={tag}\n')
              fh.write(f'url={asset_url}\n')
          PY
      - name: Cache VirusTotal CLI
        if: ${{ env.VT_API_KEY != '' }}
        id: cache-vt
        uses: actions/cache@v4
        with:
          path: |
            vt
            ${{ env.VT_CLI_ARCHIVE }}
          key: vt-${{ runner.os }}-${{ steps.vt_release.outputs.tag }}
      - name: Download VirusTotal CLI
        if: ${{ env.VT_API_KEY != '' && steps.cache-vt.outputs.cache-hit != 'true' }}
        run: |
          set -euo pipefail
          curl -sSL "${{ steps.vt_release.outputs.url }}" -o "$VT_CLI_ARCHIVE"
          unzip -q -o "$VT_CLI_ARCHIVE"
      - name: Ensure VirusTotal CLI executable
        if: ${{ env.VT_API_KEY != '' }}
        run: |
          if [ -f vt ]; then
            chmod +x vt
          fi
      - name: VirusTotal scan (optional)
        if: ${{ env.VT_API_KEY != '' }}
        env:
          VT_API_KEY: ${{ env.VT_API_KEY }}
        run: |
          ./vt scan file dist/linux/PatchOpsIII --wait --apikey "$VT_API_KEY"
      - name: Upload Linux artifact
        uses: actions/upload-artifact@v4
        with:
          name: PatchOpsIII-linux-testing
          path: |
            Testing/dist/linux/PatchOpsIII
            Testing/dist/linux/hash.log
            Testing/dist/linux/PatchOpsIII.sig
            Testing/dist/linux/PatchOpsIII.pem
          if-no-files-found: ignore
