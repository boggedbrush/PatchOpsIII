name: Linux Testing Build

on:
  push:
    branches:
      - Testing
      - testing
  pull_request:
    branches:
      - Testing
      - testing
  workflow_dispatch:

permissions:
  contents: read
  id-token: write

jobs:
  build-linux:
    name: Build Linux executable
    runs-on: ubuntu-latest
    defaults:
      run:
        shell: bash
        working-directory: Testing
    env:
      PYINSTALLER_ARCHIVE: pyinstaller-latest.zip
      PYINSTALLER_DIR: pyinstaller-develop
      LINUX_DIST_DIR: dist/linux
    steps:
      - uses: actions/checkout@v4
      - name: Setup Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.11'
      - name: Install base tooling
        run: |
          python -m pip install --upgrade pip setuptools wheel
      - name: Install project requirements
        run: |
          python -m pip install -r requirements.txt
      - name: Prepare PyInstaller source
        run: |
          rm -f "$PYINSTALLER_ARCHIVE"
          rm -rf "$PYINSTALLER_DIR"
          curl -L -o "$PYINSTALLER_ARCHIVE" https://github.com/pyinstaller/pyinstaller/archive/refs/heads/develop.zip
          unzip -q "$PYINSTALLER_ARCHIVE"
      - name: Install PyInstaller from source
        run: |
          pushd "$PYINSTALLER_DIR"
          python -m pip install .
          popd
      - name: Rebuild PyInstaller bootloader
        run: |
          pushd "$PYINSTALLER_DIR/bootloader"
          python waf distclean all
          popd
      - name: Build Linux binary
        run: |
          rm -rf dist build
          rm -f PatchOpsIII.spec
          mkdir -p "$LINUX_DIST_DIR"
          python -m PyInstaller \
            --onefile \
            --noconsole \
            --clean \
            --noupx \
            --name PatchOpsIII \
            --icon PatchOpsIII.ico \
            --add-data "presets.json:." \
            --add-data "PatchOpsIII.ico:." \
            --distpath "$LINUX_DIST_DIR" \
            main.py
      - name: Install cosign (optional)
        if: ${{ secrets.COSIGN_PRIVATE_KEY != '' }}
        uses: sigstore/cosign-installer@v3.4.0
      - name: Sign Linux binary with cosign
        if: ${{ secrets.COSIGN_PRIVATE_KEY != '' }}
        env:
          COSIGN_PRIVATE_KEY: ${{ secrets.COSIGN_PRIVATE_KEY }}
          COSIGN_PASSWORD: ${{ secrets.COSIGN_PASSWORD }}
          COSIGN_EXPERIMENTAL: "1"
        run: |
          if [ ! -f "dist/linux/PatchOpsIII" ]; then
            echo "dist/linux/PatchOpsIII was not produced" >&2
            exit 1
          fi
          printf "%s" "$COSIGN_PRIVATE_KEY" > cosign.key
          cosign sign-blob --yes --key cosign.key --output-signature dist/linux/PatchOpsIII.sig --output-certificate dist/linux/PatchOpsIII.pem dist/linux/PatchOpsIII
          rm -f cosign.key
      - name: Compute Linux hash
        run: |
          if [ ! -f "dist/linux/PatchOpsIII" ]; then
            echo "dist/linux/PatchOpsIII was not produced" >&2
            exit 1
          fi
          hash=$(sha256sum dist/linux/PatchOpsIII | cut -d ' ' -f1)
          printf "%s\n" "$hash" > dist/linux/hash.log
          echo "SHA256: $hash"
          echo "LINUX_VT_URL=https://www.virustotal.com/gui/file/$hash" >> "$GITHUB_ENV"
      - name: VirusTotal scan (optional)
        if: ${{ secrets.VT_API_KEY != '' }}
        env:
          VT_API_KEY: ${{ secrets.VT_API_KEY }}
        run: |
          python -c "import json, urllib.request, pathlib; data=json.load(urllib.request.urlopen('https://api.github.com/repos/VirusTotal/vt-cli/releases/latest')); url=next(a['browser_download_url'] for a in data['assets'] if a['name']=='Linux64.zip'); pathlib.Path('vt-cli.zip').write_bytes(urllib.request.urlopen(url).read())"
          unzip -q -o vt-cli.zip
          chmod +x vt
          VT_APIKEY="$VT_API_KEY" ./vt scan file dist/linux/PatchOpsIII --wait
      - name: Upload Linux artifact
        uses: actions/upload-artifact@v4
        with:
          name: PatchOpsIII-linux-testing
          path: |
            Testing/dist/linux/PatchOpsIII
            Testing/dist/linux/hash.log
            Testing/dist/linux/PatchOpsIII.sig
            Testing/dist/linux/PatchOpsIII.pem
          if-no-files-found: ignore
