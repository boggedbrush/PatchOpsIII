name: Windows Testing Build

on:
  push:
    branches:
      - Testing
      - testing
  pull_request:
    branches:
      - Testing
      - testing
  workflow_dispatch:

permissions:
  contents: read
  id-token: write

jobs:
  build-windows:
    name: Build Windows executable
    runs-on: windows-latest
    defaults:
      run:
        shell: pwsh
        working-directory: Testing
    env:
      PYINSTALLER_ARCHIVE: pyinstaller-latest.zip
      PYINSTALLER_DIR: pyinstaller-develop
      WINDOWS_DIST_DIR: dist\windows
    steps:
      - uses: actions/checkout@v4
      - name: Setup Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.11'
      - name: Install base tooling
        run: |
          python -m pip install --upgrade pip setuptools wheel
      - name: Install project requirements
        run: |
          python -m pip install -r requirements.txt
      - name: Prepare PyInstaller source
        run: |
          if (Test-Path $env:PYINSTALLER_ARCHIVE) { Remove-Item $env:PYINSTALLER_ARCHIVE -Force }
          if (Test-Path $env:PYINSTALLER_DIR) { Remove-Item $env:PYINSTALLER_DIR -Recurse -Force }
          Invoke-WebRequest -Uri https://github.com/pyinstaller/pyinstaller/archive/refs/heads/develop.zip -OutFile $env:PYINSTALLER_ARCHIVE
          Expand-Archive -Path $env:PYINSTALLER_ARCHIVE -DestinationPath .
      - name: Install PyInstaller from source
        run: |
          Push-Location $env:PYINSTALLER_DIR
          python -m pip install .
          Pop-Location
      - name: Rebuild PyInstaller bootloader
        run: |
          Push-Location "$env:PYINSTALLER_DIR\bootloader"
          python waf distclean all --target-arch=64bit
          Pop-Location
      - name: Build Windows binary
        run: |
          if (Test-Path 'dist') { Remove-Item 'dist' -Recurse -Force }
          if (Test-Path 'build') { Remove-Item 'build' -Recurse -Force }
          if (Test-Path 'PatchOpsIII.spec') { Remove-Item 'PatchOpsIII.spec' -Force }
          New-Item -ItemType Directory -Force -Path $env:WINDOWS_DIST_DIR | Out-Null
          python -m PyInstaller `
            --onefile `
            --noconsole `
            --clean `
            --noupx `
            --name PatchOpsIII `
            --icon PatchOpsIII.ico `
            --add-data "presets.json;." `
            --add-data "PatchOpsIII.ico;." `
            --distpath $env:WINDOWS_DIST_DIR `
            main.py
      - name: Install cosign (optional)
        if: ${{ secrets.COSIGN_PRIVATE_KEY != '' }}
        uses: sigstore/cosign-installer@v3.4.0
      - name: Sign Windows binary with cosign
        if: ${{ secrets.COSIGN_PRIVATE_KEY != '' }}
        env:
          COSIGN_PRIVATE_KEY: ${{ secrets.COSIGN_PRIVATE_KEY }}
          COSIGN_PASSWORD: ${{ secrets.COSIGN_PASSWORD }}
          COSIGN_EXPERIMENTAL: "1"
        run: |
          if (-not (Test-Path 'dist/windows/PatchOpsIII.exe')) {
            throw 'dist/windows/PatchOpsIII.exe was not produced'
          }
          Set-Content -Path cosign.key -Value $env:COSIGN_PRIVATE_KEY -NoNewline
          cosign sign-blob --yes --key cosign.key --output-signature dist/windows/PatchOpsIII.sig --output-certificate dist/windows/PatchOpsIII.pem dist/windows/PatchOpsIII.exe
          Remove-Item cosign.key
      - name: Compute Windows hash
        run: |
          if (-not (Test-Path 'dist/windows/PatchOpsIII.exe')) {
            throw 'dist/windows/PatchOpsIII.exe was not produced'
          }
          $hash = (Get-FileHash -Algorithm SHA256 -Path 'dist/windows/PatchOpsIII.exe').Hash
          Set-Content -Path 'dist/windows/hash.log' -Value $hash
          Write-Host "SHA256: $hash"
          "WINDOWS_VT_URL=https://www.virustotal.com/gui/file/$hash" | Out-File -FilePath $env:GITHUB_ENV -Encoding utf8 -Append
      - name: VirusTotal scan (optional)
        if: ${{ secrets.VT_API_KEY != '' }}
        env:
          VT_API_KEY: ${{ secrets.VT_API_KEY }}
        run: |
          $vtZip = 'vt-cli-latest.zip'
          if (Test-Path $vtZip) { Remove-Item $vtZip -Force }
          if (Test-Path 'vt.exe') { Remove-Item 'vt.exe' -Force }
          $downloadUrl = (Invoke-RestMethod -Uri https://api.github.com/repos/VirusTotal/vt-cli/releases/latest).assets | Where-Object { $_.name -eq 'Windows64.zip' } | Select-Object -ExpandProperty browser_download_url
          Invoke-WebRequest -Uri $downloadUrl -OutFile $vtZip
          Expand-Archive -Path $vtZip -DestinationPath . -Force
          $env:VT_APIKEY = $env:VT_API_KEY
          .\vt.exe scan file dist/windows/PatchOpsIII.exe --wait
      - name: Upload Windows artifact
        uses: actions/upload-artifact@v4
        with:
          name: PatchOpsIII-windows-testing
          path: |
            Testing/dist/windows/PatchOpsIII.exe
            Testing/dist/windows/hash.log
            Testing/dist/windows/PatchOpsIII.sig
            Testing/dist/windows/PatchOpsIII.pem
          if-no-files-found: ignore
