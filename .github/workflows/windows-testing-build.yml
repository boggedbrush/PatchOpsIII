name: Windows Testing Build

on:
  push:
    branches:
      - Testing
      - testing
  pull_request:
    branches:
      - Testing
      - testing
  workflow_dispatch:
  workflow_call:
    inputs:
      ref:
        description: Git ref to build
        required: false
        type: string
        default: ''
    outputs:
      hash:
        description: SHA256 hash of the Windows binary
        value: ${{ jobs.build-windows.outputs.hash }}
      vt_url:
        description: VirusTotal URL for the Windows binary
        value: ${{ jobs.build-windows.outputs.vt_url }}
      artifact_name:
        description: Name of the produced Windows artifact
        value: ${{ jobs.build-windows.outputs.artifact_name }}

permissions:
  contents: read
  id-token: write

jobs:
  build-windows:
    name: Build Windows executable
    runs-on: windows-latest
    outputs:
      hash: ${{ steps.compute_hash.outputs.hash }}
      vt_url: ${{ steps.compute_hash.outputs.vt_url }}
      artifact_name: PatchOpsIII-windows-testing
    defaults:
      run:
        shell: pwsh
        working-directory: Testing
    env:
      PYINSTALLER_ARCHIVE: pyinstaller-latest.zip
      PYINSTALLER_DIR: pyinstaller-develop
      WINDOWS_DIST_DIR: dist\windows
      VT_CLI_ARCHIVE: vt-cli-latest.zip
      COSIGN_PRIVATE_KEY: ${{ secrets.COSIGN_PRIVATE_KEY }}
      COSIGN_PASSWORD: ${{ secrets.COSIGN_PASSWORD }}
      VT_API_KEY: ${{ secrets.VT_API_KEY }}
    steps:
      - uses: actions/checkout@v4
        with:
          ref: ${{ inputs.ref != '' && inputs.ref || github.ref }}
      - name: Setup Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.11'
          cache: 'pip'
          cache-dependency-path: Testing/requirements.txt
      - name: Determine PyInstaller commit
        id: pyinstaller_ref
        shell: pwsh
        run: |
          $lines = git ls-remote https://github.com/pyinstaller/pyinstaller develop
          if (-not $lines) {
            throw 'Failed to resolve PyInstaller develop commit'
          }
          $commit = $lines[0].Split("`t")[0]
          if (-not $commit) {
            throw 'Commit hash not found for PyInstaller develop'
          }
          "commit=$commit" | Out-File -FilePath $env:GITHUB_OUTPUT -Encoding utf8 -Append
      - name: Cache PyInstaller source
        id: cache-pyinstaller
        uses: actions/cache@v4
        with:
          path: ${{ env.PYINSTALLER_DIR }}
          key: pyinstaller-${{ runner.os }}-${{ steps.pyinstaller_ref.outputs.commit }}
      - name: Install project requirements
        run: |
          python -m pip install -r requirements.txt
      - name: Prepare PyInstaller source
        if: ${{ steps.cache-pyinstaller.outputs.cache-hit != 'true' }}
        run: |
          if (Test-Path $env:PYINSTALLER_ARCHIVE) { Remove-Item $env:PYINSTALLER_ARCHIVE -Force }
          if (Test-Path $env:PYINSTALLER_DIR) { Remove-Item $env:PYINSTALLER_DIR -Recurse -Force }
          Invoke-WebRequest -Uri https://github.com/pyinstaller/pyinstaller/archive/refs/heads/develop.zip -OutFile $env:PYINSTALLER_ARCHIVE
          Expand-Archive -Path $env:PYINSTALLER_ARCHIVE -DestinationPath .
      - name: Install PyInstaller from source
        run: |
          Push-Location $env:PYINSTALLER_DIR
          python -m pip install .
          Pop-Location
      - name: Rebuild PyInstaller bootloader
        if: ${{ steps.cache-pyinstaller.outputs.cache-hit != 'true' }}
        run: |
          Push-Location "$env:PYINSTALLER_DIR\bootloader"
          python waf distclean all --target-arch=64bit
          Pop-Location
      - name: Build Windows binary
        run: |
          if (Test-Path 'dist') { Remove-Item 'dist' -Recurse -Force }
          if (Test-Path 'build') { Remove-Item 'build' -Recurse -Force }
          if (Test-Path 'PatchOpsIII.spec') { Remove-Item 'PatchOpsIII.spec' -Force }
          New-Item -ItemType Directory -Force -Path $env:WINDOWS_DIST_DIR | Out-Null
          python -m PyInstaller `
            --onefile `
            --noconsole `
            --clean `
            --noupx `
            --name PatchOpsIII `
            --icon PatchOpsIII.ico `
            --add-data "presets.json;." `
            --add-data "PatchOpsIII.ico;." `
            --distpath $env:WINDOWS_DIST_DIR `
            main.py
      - name: Install cosign (optional)
        if: ${{ env.COSIGN_PRIVATE_KEY != '' }}
        uses: sigstore/cosign-installer@v3.4.0
      - name: Sign Windows binary with cosign
        if: ${{ env.COSIGN_PRIVATE_KEY != '' }}
        env:
          COSIGN_EXPERIMENTAL: "1"
        run: |
          if (-not (Test-Path 'dist/windows/PatchOpsIII.exe')) {
            throw 'dist/windows/PatchOpsIII.exe was not produced'
          }
          Set-Content -Path cosign.key -Value $env:COSIGN_PRIVATE_KEY -NoNewline
          cosign sign-blob --yes --key cosign.key --output-signature dist/windows/PatchOpsIII.sig --output-certificate dist/windows/PatchOpsIII.pem dist/windows/PatchOpsIII.exe
          Remove-Item cosign.key
      - name: Compute Windows hash
        id: compute_hash
        run: |
          if (-not (Test-Path 'dist/windows/PatchOpsIII.exe')) {
            throw 'dist/windows/PatchOpsIII.exe was not produced'
          }
          $hash = (Get-FileHash -Algorithm SHA256 -Path 'dist/windows/PatchOpsIII.exe').Hash
          Set-Content -Path 'dist/windows/hash.log' -Value $hash
          Write-Host "SHA256: $hash"
          $vtUrl = "https://www.virustotal.com/gui/file/$hash"
          "WINDOWS_VT_URL=$vtUrl" | Out-File -FilePath $env:GITHUB_ENV -Encoding utf8 -Append
          "hash=$hash" | Out-File -FilePath $env:GITHUB_OUTPUT -Encoding utf8 -Append
          "vt_url=$vtUrl" | Out-File -FilePath $env:GITHUB_OUTPUT -Encoding utf8 -Append
      - name: Determine VirusTotal CLI release
        id: vt_release
        if: ${{ env.VT_API_KEY != '' }}
        shell: pwsh
        run: |
          $release = Invoke-RestMethod -Uri https://api.github.com/repos/VirusTotal/vt-cli/releases/latest
          $tag = $release.tag_name
          if (-not $tag) {
            throw 'Release tag missing from VirusTotal CLI metadata'
          }
          $asset = $release.assets | Where-Object { $_.name -eq 'Windows64.zip' } | Select-Object -First 1
          if (-not $asset) {
            throw 'Windows64.zip asset not found in VirusTotal CLI release metadata'
          }
          "tag=$tag" | Out-File -FilePath $env:GITHUB_OUTPUT -Encoding utf8 -Append
          "url=$($asset.browser_download_url)" | Out-File -FilePath $env:GITHUB_OUTPUT -Encoding utf8 -Append
      - name: Cache VirusTotal CLI
        if: ${{ env.VT_API_KEY != '' }}
        id: cache-vt
        uses: actions/cache@v4
        with:
          path: |
            vt.exe
            ${{ env.VT_CLI_ARCHIVE }}
          key: vt-${{ runner.os }}-${{ steps.vt_release.outputs.tag }}
      - name: Download VirusTotal CLI
        if: ${{ env.VT_API_KEY != '' && steps.cache-vt.outputs.cache-hit != 'true' }}
        shell: pwsh
        run: |
          Invoke-WebRequest -Uri '${{ steps.vt_release.outputs.url }}' -OutFile $env:VT_CLI_ARCHIVE
          Expand-Archive -Path $env:VT_CLI_ARCHIVE -DestinationPath . -Force
      - name: Ensure VirusTotal CLI executable
        if: ${{ env.VT_API_KEY != '' }}
        shell: pwsh
        run: |
          if (-not (Test-Path 'vt.exe')) {
            throw 'VirusTotal CLI binary vt.exe not found'
          }
      - name: VirusTotal scan (optional)
        if: ${{ env.VT_API_KEY != '' }}
        env:
          VT_API_KEY: ${{ env.VT_API_KEY }}
        run: |
          .\vt.exe scan file dist/windows/PatchOpsIII.exe --wait --apikey $env:VT_API_KEY
      - name: Upload Windows artifact
        uses: actions/upload-artifact@v4
        with:
          name: PatchOpsIII-windows-testing
          path: |
            Testing/dist/windows/PatchOpsIII.exe
            Testing/dist/windows/hash.log
            Testing/dist/windows/PatchOpsIII.sig
            Testing/dist/windows/PatchOpsIII.pem
          if-no-files-found: ignore
